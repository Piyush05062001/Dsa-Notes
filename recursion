Combination Sum - 1 | leetCode - 39
Question. Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.

def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        result = []
        def backtrack(index, target, curr):
            if target == 0:
                result.append(curr[:]) 
                return
            if target < 0 or index>=len(candidates):
                return
            backtrack( index, target - candidates[index], curr + [candidates[index]])  \\ include the current element 
            backtrack( index +1, target, curr) \\ exclude the current element and increment the index
        backtrack( 0, target, [])
        return result    

DRY RUN FOR ABOVE CODE
for ex [2,3] target = 6
[]
 ├── [2]
 │   ├── [2,2]
 │   │   ├── [2,2,2] ✅
 │   │   └── skip
 │   └── [2,3] ❌
 └── [3]
     ├── [3,3] ✅
     └── skip

Q2. Combinationsum-2
        
def combinationSUmtwo(arr, target):
        res = []
        ds = []
        index = 0
        def backtrack(index, target):
                if target == 0: // target equals zero return
                        res.append(ds[:])
                        return
                for i in range(index, len(arr)):
                        if i> index and arr[i] == arr[i-1]: checks wheather current elements not repeat itself
                                continue
                        if arr[i]>target: if target is less than arr[i] that means no sequence to break the loop
                                break
                        ds.append(arr[i]) // pick
                        backtrack(i+1, target - arr[i])
                        ds.pop() //not pick 
        backtrack(0, target)
        return res
                
arr = [1,1,1,2,2]
target = 3
print(combinationSUmtwo(arr, target))


Q3. Subset=2

def subsetsWithDup(nums):
    ans = []
    def findSubsets(ind, ds, ans):
        ans.append(ds[:])
        for i in range(ind, len(nums)):
            if i>ind and nums[i] == nums[i-1]: // prevent duplicates
                continue
            ds.append(nums[i])  // pick and not pick logic
            findSubsets(ind+1, ds, ans)
            ds.pop()
    findSubsets(0, [], ans)
    return ans
nums = [1,2,2]
print(subsetsWithDup(nums))



